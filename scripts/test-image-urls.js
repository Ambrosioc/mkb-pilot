const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testImageUrls() {
  try {
    console.log('üß™ Test des URLs d\'images apr√®s migration...\n');

    // V√©rifier les variables d'environnement
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Variables d\'environnement Supabase manquantes');
      return;
    }

    console.log('‚úÖ Variables d\'environnement Supabase configur√©es');

    const supabase = createClient(supabaseUrl, supabaseKey);

    // R√©cup√©rer quelques annonces avec des photos
    console.log('\nüìã R√©cup√©ration des annonces avec photos...');
    const { data: advertisements, error } = await supabase
      .from('advertisements')
      .select('id, car_id, photos, created_at')
      .not('photos', 'is', null)
      .limit(10);

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des annonces:', error);
      return;
    }

    console.log(`‚úÖ ${advertisements?.length || 0} annonces trouv√©es avec des photos`);

    if (advertisements && advertisements.length > 0) {
      console.log('\nüìä URLs des images:');
      
      advertisements.forEach((ad, index) => {
        console.log(`\nAnnonce ${index + 1} (ID: ${ad.id}):`);
        console.log(`  - Car ID: ${ad.car_id}`);
        console.log(`  - Date: ${ad.created_at}`);
        console.log(`  - Nombre de photos: ${ad.photos?.length || 0}`);
        
        if (ad.photos && ad.photos.length > 0) {
          ad.photos.forEach((photo, photoIndex) => {
            const isNewUrl = photo.includes('images.mkbautomobile.com');
            const status = isNewUrl ? '‚úÖ' : '‚ùå';
            console.log(`    ${status} Photo ${photoIndex + 1}: ${photo}`);
          });
        }
      });

      // V√©rifier les statistiques
      const totalPhotos = advertisements.reduce((total, ad) => total + (ad.photos?.length || 0), 0);
      const newUrls = advertisements.reduce((total, ad) => {
        return total + (ad.photos?.filter(photo => photo.includes('images.mkbautomobile.com')).length || 0);
      }, 0);
      const oldUrls = totalPhotos - newUrls;

      console.log('\nüìà Statistiques:');
      console.log(`  - Total photos: ${totalPhotos}`);
      console.log(`  - URLs mises √† jour: ${newUrls}`);
      console.log(`  - URLs √† mettre √† jour: ${oldUrls}`);
      console.log(`  - Taux de mise √† jour: ${totalPhotos > 0 ? ((newUrls / totalPhotos) * 100).toFixed(1) : 0}%`);

      if (oldUrls > 0) {
        console.log('\n‚ö†Ô∏è Certaines URLs utilisent encore l\'ancien format');
        console.log('üí° Ex√©cutez la migration pour mettre √† jour toutes les URLs');
      } else {
        console.log('\n‚úÖ Toutes les URLs sont √† jour !');
      }
    } else {
      console.log('‚ö†Ô∏è Aucune annonce avec des photos trouv√©e');
    }

    // Test de g√©n√©ration d'URL pour un nouveau v√©hicule
    console.log('\nüß™ Test de g√©n√©ration d\'URL pour nouveau v√©hicule:');
    const testReference = 'TEST001';
    const testFileName = 'photo-1.jpg';
    const testUrl = `https://images.mkbautomobile.com/photos/${testReference}/${testFileName}`;
    console.log(`  - R√©f√©rence: ${testReference}`);
    console.log(`  - Fichier: ${testFileName}`);
    console.log(`  - URL g√©n√©r√©e: ${testUrl}`);

    console.log('\n‚úÖ Tests termin√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

testImageUrls().catch(console.error); 