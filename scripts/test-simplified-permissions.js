require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üß™ TEST DU SYST√àME DE PERMISSIONS SIMPLIFI√â');
console.log('============================================\n');

async function testSimplifiedPermissions() {
  try {
    // 1. R√©cup√©rer l'utilisateur Ambrosie
    console.log('üìã 1. R√©cup√©ration de l\'utilisateur Ambrosie...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'a.cazimira@gmail.com');

    if (usersError || users.length === 0) {
      console.error('‚ùå Utilisateur Ambrosie non trouv√©');
      return;
    }

    const user = users[0];
    console.log('‚úÖ Utilisateur trouv√©:', user.prenom, user.nom);

    // 2. V√©rifier le r√¥le hi√©rarchique
    console.log('\nüìã 2. R√¥le hi√©rarchique...');
    const { data: userRole, error: roleError } = await supabase
      .from('user_roles')
      .select(`
        role_id,
        roles (
          nom,
          niveau,
          description
        )
      `)
      .eq('user_id', user.auth_user_id)
      .single();

    if (roleError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du r√¥le:', roleError);
      return;
    }

    console.log('üìä R√¥le hi√©rarchique:');
    console.log(`   - R√¥le: ${userRole.roles.nom}`);
    console.log(`   - Niveau: ${userRole.roles.niveau}`);
    console.log(`   - Description: ${userRole.roles.description}`);

    // 3. V√©rifier les affectations aux p√¥les
    console.log('\nüìã 3. Affectations aux p√¥les...');
    const { data: poleAssignments, error: poleError } = await supabase
      .from('user_poles')
      .select(`
        poles (
          name,
          description
        )
      `)
      .eq('user_id', user.auth_user_id);

    if (poleError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des p√¥les:', poleError);
      return;
    }

    console.log('üìä P√¥les affect√©s:');
    poleAssignments.forEach(assignment => {
      console.log(`   - ${assignment.poles.name}: ${assignment.poles.description}`);
    });

    // 4. Tester la nouvelle fonction get_user_pole_access
    console.log('\nüìã 4. Test de get_user_pole_access...');
    const { data: poleAccess, error: accessError } = await supabase
      .rpc('get_user_pole_access', {
        p_user_id: user.auth_user_id,
        p_pole_name: 'Stock'
      });

    if (accessError) {
      console.error('‚ùå Erreur lors du test de get_user_pole_access:', accessError);
      return;
    }

    if (poleAccess && poleAccess.length > 0) {
      const access = poleAccess[0];
      console.log('üìä Acc√®s au p√¥le Stock:');
      console.log(`   - Niveau: ${access.role_level}`);
      console.log(`   - Lecture: ${access.can_read ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - √âcriture: ${access.can_write ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Gestion: ${access.can_manage ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log('‚ùå Aucun acc√®s trouv√© pour le p√¥le Stock');
    }

    // 5. Tester la fonction get_user_poles
    console.log('\nüìã 5. Test de get_user_poles...');
    const { data: userPoles, error: polesError } = await supabase
      .rpc('get_user_poles', {
        p_user_id: user.auth_user_id
      });

    if (polesError) {
      console.error('‚ùå Erreur lors du test de get_user_poles:', polesError);
      return;
    }

    console.log('üìä Tous les p√¥les avec permissions:');
    userPoles.forEach(pole => {
      console.log(`   - ${pole.pole_name}:`);
      console.log(`     Niveau: ${pole.role_level}`);
      console.log(`     Lecture: ${pole.can_read ? '‚úÖ' : '‚ùå'}`);
      console.log(`     √âcriture: ${pole.can_write ? '‚úÖ' : '‚ùå'}`);
      console.log(`     Gestion: ${pole.can_manage ? '‚úÖ' : '‚ùå'}`);
    });

    // 6. Tester la fonction has_pole_access
    console.log('\nüìã 6. Test de has_pole_access...');
    const { data: hasStockAccess, error: hasAccessError } = await supabase
      .rpc('has_pole_access', {
        p_user_id: user.auth_user_id,
        p_pole_name: 'Stock'
      });

    if (hasAccessError) {
      console.error('‚ùå Erreur lors du test de has_pole_access:', hasAccessError);
      return;
    }

    console.log(`üìä Acc√®s au p√¥le Stock: ${hasStockAccess ? '‚úÖ' : '‚ùå'}`);

    // 7. Tester la fonction get_user_access_level
    console.log('\nüìã 7. Test de get_user_access_level...');
    const { data: accessLevel, error: levelError } = await supabase
      .rpc('get_user_access_level', {
        p_user_id: user.auth_user_id
      });

    if (levelError) {
      console.error('‚ùå Erreur lors du test de get_user_access_level:', levelError);
      return;
    }

    console.log(`üìä Niveau d'acc√®s global: ${accessLevel}`);

    // 8. R√©sum√© final
    console.log('\nüéØ R√âSUM√â FINAL');
    console.log('================');
    console.log(`R√¥le hi√©rarchique: ${userRole.roles.nom} (Niveau ${userRole.roles.niveau})`);
    console.log(`Niveau d'acc√®s global: ${accessLevel}`);
    console.log(`P√¥les affect√©s: ${poleAssignments.length}`);
    
    const stockAccess = userPoles.find(p => p.pole_name === 'Stock');
    if (stockAccess) {
      console.log('\n‚úÖ Permissions Stock:');
      console.log(`   - Lecture: ${stockAccess.can_read ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - √âcriture: ${stockAccess.can_write ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Gestion: ${stockAccess.can_manage ? '‚úÖ' : '‚ùå'}`);
      
      if (stockAccess.can_write) {
        console.log('\n‚úÖ Vous pouvez maintenant:');
        console.log('   - Cr√©er des v√©hicules');
        console.log('   - Modifier des v√©hicules');
        console.log('   - Cr√©er des devis/factures');
        console.log('   - Envoyer des emails');
      }
    }

    console.log('\nüß™ POUR TESTER:');
    console.log('   1. Reconnectez-vous √† l\'application');
    console.log('   2. Allez dans Stock');
    console.log('   3. V√©rifiez que les boutons de cr√©ation sont maintenant visibles');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

testSimplifiedPermissions(); 