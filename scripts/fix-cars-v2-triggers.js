// Script pour diagnostiquer et corriger les triggers sur cars_v2
// Usage: node scripts/fix-cars-v2-triggers.js

const { createClient } = require('@supabase/supabase-js');
const dotenv = require('dotenv');
const path = require('path');

// Charger les variables d'environnement depuis .env.local
dotenv.config({ path: path.join(__dirname, '..', '.env.local') });

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Teste une mise √† jour simple
 */
async function testUpdate() {
  console.log('üß™ Test de mise √† jour simple...');
  
  try {
    const { data: testCar, error: testCarError } = await supabase
      .from('cars_v2')
      .select('id')
      .limit(1);
    
    if (testCarError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration d\'une voiture de test:', testCarError.message);
      return false;
    }
    
    if (!testCar || testCar.length === 0) {
      console.log('‚ö†Ô∏è  Aucune voiture trouv√©e pour le test');
      return false;
    }
    
    const testUpdate = { brand_id: null };
    console.log(`   Test sur la voiture ID ${testCar[0].id}...`);
    
    const { error: testUpdateError } = await supabase
      .from('cars_v2')
      .update(testUpdate)
      .eq('id', testCar[0].id);
    
    if (testUpdateError) {
      console.error('‚ùå Erreur lors du test de mise √† jour:', testUpdateError.message);
      console.error('   Code:', testUpdateError.code);
      console.error('   D√©tails:', testUpdateError.details);
      return false;
    } else {
      console.log('‚úÖ Test de mise √† jour r√©ussi');
      return true;
    }
  } catch (error) {
    console.error('‚ùå Erreur inattendue lors du test:', error.message);
    return false;
  }
}

/**
 * Supprime tous les triggers sur cars_v2 (solution radicale)
 */
async function dropAllTriggers() {
  console.log('üóëÔ∏è  Suppression de tous les triggers sur cars_v2...\n');
  
  // Liste des triggers connus qui pourraient causer des probl√®mes
  const knownTriggers = [
    'ensure_ref_auto_on_cars_v2',
    'update_cars_v2_updated_at',
    'set_ref_auto_if_null'
  ];
  
  let droppedCount = 0;
  
  for (const triggerName of knownTriggers) {
    console.log(`üîç Tentative de suppression du trigger ${triggerName}...`);
    
    try {
      // On ne peut pas ex√©cuter DROP TRIGGER directement via l'API Supabase
      // Cette fonction est juste pour l'information
      console.log(`   ‚ö†Ô∏è  Impossible de supprimer le trigger ${triggerName} via l'API`);
      console.log(`   üí° Utilisez l'interface Supabase ou pgAdmin pour supprimer ce trigger`);
    } catch (error) {
      console.error(`   ‚ùå Erreur: ${error.message}`);
    }
  }
  
  console.log(`\nüìä R√©sum√©: ${droppedCount} trigger(s) supprim√©(s)`);
  console.log('\nüí° Pour supprimer les triggers manuellement:');
  console.log('   1. Allez dans l\'interface Supabase > SQL Editor');
  console.log('   2. Ex√©cutez: DROP TRIGGER IF EXISTS trigger_name ON cars_v2;');
  console.log('   3. Ou utilisez pgAdmin pour examiner et supprimer les triggers');
}

/**
 * Affiche les instructions pour corriger le probl√®me
 */
function showInstructions() {
  console.log('üîß Instructions pour corriger le probl√®me des triggers:\n');
  
  console.log('1Ô∏è‚É£ DIAGNOSTIC MANUEL:');
  console.log('   - Allez dans Supabase > SQL Editor');
  console.log('   - Ex√©cutez: SELECT * FROM information_schema.triggers WHERE event_object_table = \'cars_v2\';');
  console.log('   - Identifiez les triggers qui font r√©f√©rence √† \'date_post\'');
  
  console.log('\n2Ô∏è‚É£ SUPPRESSION DES TRIGGERS PROBL√âMATIQUES:');
  console.log('   - Ex√©cutez: DROP TRIGGER IF EXISTS trigger_name ON cars_v2;');
  console.log('   - Remplacez \'trigger_name\' par le nom du trigger probl√©matique');
  
  console.log('\n3Ô∏è‚É£ V√âRIFICATION:');
  console.log('   - Testez une mise √† jour: UPDATE cars_v2 SET brand_id = NULL WHERE id = 1;');
  console.log('   - Si √ßa fonctionne, le probl√®me est r√©solu');
  
  console.log('\n4Ô∏è‚É£ ALTERNATIVE - D√âSACTIVER TEMPORAIREMENT:');
  console.log('   - Ex√©cutez: ALTER TABLE cars_v2 DISABLE TRIGGER ALL;');
  console.log('   - Faites vos mises √† jour');
  console.log('   - R√©activez: ALTER TABLE cars_v2 ENABLE TRIGGER ALL;');
}

/**
 * Fonction principale
 */
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'test':
      await testUpdate();
      break;
    case 'drop':
      await dropAllTriggers();
      break;
    case 'instructions':
      showInstructions();
      break;
    default:
      console.log('Usage:');
      console.log('  node scripts/fix-cars-v2-triggers.js test         - Tester une mise √† jour');
      console.log('  node scripts/fix-cars-v2-triggers.js drop         - Instructions pour supprimer les triggers');
      console.log('  node scripts/fix-cars-v2-triggers.js instructions - Afficher les instructions de correction');
      break;
  }
}

main(); 