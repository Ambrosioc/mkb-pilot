// Script de test pour v√©rifier l'inscription utilisateur
// Usage: node scripts/test-user-registration.js

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (√† adapter selon votre configuration)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testUserRegistration() {
  console.log('üß™ Test d\'inscription utilisateur...\n');

  const testEmail = `test-${Date.now()}@example.com`;
  const testPassword = 'testpassword123';
  const testFirstName = 'Jean';
  const testLastName = 'Dupont';

  try {
    // 1. Cr√©er un utilisateur via l'API Supabase
    console.log('1Ô∏è‚É£ Cr√©ation de l\'utilisateur via Supabase Auth...');
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true,
      user_metadata: {
        full_name: `${testFirstName} ${testLastName}`,
        role: 'user',
      }
    });

    if (authError) {
      throw new Error(`Erreur Auth: ${authError.message}`);
    }

    console.log('‚úÖ Utilisateur cr√©√© dans auth.users');
    console.log(`   ID: ${authData.user.id}`);
    console.log(`   Email: ${authData.user.email}`);

    // 2. Cr√©er l'enregistrement dans la table users via RPC
    console.log('\n2Ô∏è‚É£ Cr√©ation de l\'enregistrement dans la table users via RPC...');
    const { error: userError } = await supabase
      .rpc('create_user_profile', {
        auth_user_id: authData.user.id,
        prenom: testFirstName,
        nom: testLastName,
        email: testEmail
      });

    if (userError) {
      throw new Error(`Erreur table users: ${userError.message}`);
    }

    // 3. V√©rifier que les donn√©es sont correctes
    console.log('\n3Ô∏è‚É£ V√©rification des donn√©es...');
    const { data: verifyData, error: verifyError } = await supabase
      .from('users')
      .select('prenom, nom, email')
      .eq('auth_user_id', authData.user.id)
      .single();

    if (verifyError) {
      throw new Error(`Erreur v√©rification: ${verifyError.message}`);
    }

    if (verifyData.prenom === testFirstName && verifyData.nom === testLastName) {
      console.log('‚úÖ Donn√©es correctement enregistr√©es');
      console.log(`   Pr√©nom attendu: ${testFirstName} ‚Üí Re√ßu: ${verifyData.prenom}`);
      console.log(`   Nom attendu: ${testLastName} ‚Üí Re√ßu: ${verifyData.nom}`);
    } else {
      console.log('‚ùå Donn√©es incorrectes');
      console.log(`   Pr√©nom attendu: ${testFirstName} ‚Üí Re√ßu: ${verifyData.prenom}`);
      console.log(`   Nom attendu: ${testLastName} ‚Üí Re√ßu: ${verifyData.nom}`);
    }

    // 4. Nettoyer les donn√©es de test
    console.log('\n4Ô∏è‚É£ Nettoyage des donn√©es de test...');
    await supabase.auth.admin.deleteUser(authData.user.id);
    console.log('‚úÖ Utilisateur supprim√©');

    console.log('\nüéâ Test termin√© avec succ√®s !');
    console.log('\nüìã R√©sum√©:');
    console.log('   ‚úÖ Inscription utilisateur fonctionne');
    console.log('   ‚úÖ S√©paration pr√©nom/nom correcte');
    console.log('   ‚úÖ Donn√©es stock√©es dans la table users');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    process.exit(1);
  }
}

// Fonction pour v√©rifier les utilisateurs existants
async function checkExistingUsers() {
  console.log('üîç V√©rification des utilisateurs existants...\n');

  try {
    const { data: users, error } = await supabase
      .from('users')
      .select('prenom, nom, email, date_creation')
      .order('date_creation', { ascending: false })
      .limit(10);

    if (error) {
      throw new Error(`Erreur: ${error.message}`);
    }

    console.log(`üìä ${users.length} utilisateurs trouv√©s (10 plus r√©cents):\n`);

    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.prenom} ${user.nom} (${user.email})`);
      console.log(`   Cr√©√© le: ${new Date(user.date_creation).toLocaleDateString('fr-FR')}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  }
}

// Ex√©cuter les tests
async function main() {
  const command = process.argv[2];

  switch (command) {
    case 'test':
      await testUserRegistration();
      break;
    case 'check':
      await checkExistingUsers();
      break;
    default:
      console.log('Usage:');
      console.log('  node scripts/test-user-registration.js test  - Tester l\'inscription');
      console.log('  node scripts/test-user-registration.js check - V√©rifier les utilisateurs existants');
      break;
  }
}

main(); 