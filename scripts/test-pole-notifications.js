require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

console.log('üß™ Test des notifications lors de l\'assignation/suppression de p√¥les...');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testPoleNotifications() {
  try {
    // 1. R√©cup√©rer un utilisateur de test
    console.log('üë§ 1. R√©cup√©ration d\'un utilisateur de test...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .limit(1);
    
    if (usersError || !users.length) {
      console.error('‚ùå Aucun utilisateur trouv√©');
      return;
    }
    
    const testUser = users[0];
    console.log('‚úÖ Utilisateur de test:', testUser.prenom, testUser.nom);
    
    // 2. R√©cup√©rer un p√¥le de test
    console.log('üè¢ 2. R√©cup√©ration d\'un p√¥le de test...');
    const { data: poles, error: polesError } = await supabase
      .from('poles')
      .select('*')
      .limit(1);
    
    if (polesError || !poles.length) {
      console.error('‚ùå Aucun p√¥le trouv√©');
      return;
    }
    
    const testPole = poles[0];
    console.log('‚úÖ P√¥le de test:', testPole.name);
    
    // 3. V√©rifier les notifications existantes
    console.log('üì¢ 3. V√©rification des notifications existantes...');
    const { data: existingNotifications, error: notifError } = await supabase
      .from('notifications')
      .select('*')
      .eq('recipient_id', testUser.id)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (notifError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des notifications:', notifError);
    } else {
      console.log('üìã Notifications existantes:', existingNotifications.length);
      existingNotifications.forEach((notif, index) => {
        console.log(`  ${index + 1}. ${notif.title} - ${notif.read ? 'Lu' : 'Non lu'}`);
      });
    }
    
    // 4. Assigner le p√¥le √† l'utilisateur
    console.log('‚ûï 4. Assignation du p√¥le √† l\'utilisateur...');
    const { data: assignment, error: assignError } = await supabase
      .from('user_poles')
      .insert({
        user_id: testUser.id,
        pole_id: testPole.id
      })
      .select()
      .single();
    
    if (assignError) {
      if (assignError.code === '23505') {
        console.log('‚ö†Ô∏è  L\'utilisateur a d√©j√† acc√®s √† ce p√¥le');
      } else {
        console.error('‚ùå Erreur lors de l\'assignation:', assignError);
        return;
      }
    } else {
      console.log('‚úÖ P√¥le assign√© avec succ√®s');
    }
    
    // 5. Cr√©er une notification d'assignation manuellement
    console.log('üìù 5. Cr√©ation d\'une notification d\'assignation...');
    const { data: assignNotification, error: assignNotifError } = await supabase
      .from('notifications')
      .insert({
        recipient_id: testUser.id,
        sender_id: testUser.id, // M√™me utilisateur pour le test
        title: 'Acc√®s au p√¥le accord√©',
        message: `Test: Acc√®s accord√© au p√¥le "${testPole.name}"`,
        type: 'success',
        category: 'user'
      })
      .select()
      .single();
    
    if (assignNotifError) {
      console.error('‚ùå Erreur lors de la cr√©ation de la notification d\'assignation:', assignNotifError);
    } else {
      console.log('‚úÖ Notification d\'assignation cr√©√©e:', assignNotification.id);
    }
    
    // 6. Cr√©er une notification de suppression
    console.log('üìù 6. Cr√©ation d\'une notification de suppression...');
    const { data: removeNotification, error: removeNotifError } = await supabase
      .from('notifications')
      .insert({
        recipient_id: testUser.id,
        sender_id: testUser.id, // M√™me utilisateur pour le test
        title: 'Acc√®s au p√¥le retir√©',
        message: `Test: Acc√®s retir√© au p√¥le "${testPole.name}"`,
        type: 'warning',
        category: 'user'
      })
      .select()
      .single();
    
    if (removeNotifError) {
      console.error('‚ùå Erreur lors de la cr√©ation de la notification de suppression:', removeNotifError);
    } else {
      console.log('‚úÖ Notification de suppression cr√©√©e:', removeNotification.id);
    }
    
    // 7. V√©rifier les nouvelles notifications
    console.log('üì¢ 7. V√©rification des nouvelles notifications...');
    const { data: newNotifications, error: newNotifError } = await supabase
      .from('notifications')
      .select('*')
      .eq('recipient_id', testUser.id)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (newNotifError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des nouvelles notifications:', newNotifError);
    } else {
      console.log('üìã Nouvelles notifications:', newNotifications.length);
      newNotifications.forEach((notif, index) => {
        const timeAgo = Math.floor((Date.now() - new Date(notif.created_at).getTime()) / 1000);
        console.log(`  ${index + 1}. ${notif.title} - ${notif.read ? 'Lu' : 'Non lu'} (il y a ${timeAgo}s)`);
      });
    }
    
    // 8. Nettoyer - supprimer les notifications de test
    console.log('üßπ 8. Nettoyage des notifications de test...');
    if (assignNotification) {
      const { error: deleteAssignError } = await supabase
        .from('notifications')
        .delete()
        .eq('id', assignNotification.id);
      
      if (deleteAssignError) {
        console.error('‚ùå Erreur lors de la suppression de la notification d\'assignation:', deleteAssignError);
      } else {
        console.log('‚úÖ Notification d\'assignation supprim√©e');
      }
    }
    
    if (removeNotification) {
      const { error: deleteRemoveError } = await supabase
        .from('notifications')
        .delete()
        .eq('id', removeNotification.id);
      
      if (deleteRemoveError) {
        console.error('‚ùå Erreur lors de la suppression de la notification de suppression:', deleteRemoveError);
      } else {
        console.log('‚úÖ Notification de suppression supprim√©e');
      }
    }
    
    // 9. Supprimer l'affectation de p√¥le si elle a √©t√© cr√©√©e
    if (assignment) {
      console.log('üßπ 9. Suppression de l\'affectation de p√¥le...');
      const { error: deleteAssignError } = await supabase
        .from('user_poles')
        .delete()
        .eq('id', assignment.id);
      
      if (deleteAssignError) {
        console.error('‚ùå Erreur lors de la suppression de l\'affectation:', deleteAssignError);
      } else {
        console.log('‚úÖ Affectation de p√¥le supprim√©e');
      }
    }
    
    console.log('üéâ Test termin√© avec succ√®s !');
    console.log('üìã R√©sum√©:');
    console.log('  - Notifications d\'assignation: ‚úÖ');
    console.log('  - Notifications de suppression: ‚úÖ');
    console.log('  - Nettoyage: ‚úÖ');
    
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

testPoleNotifications(); 