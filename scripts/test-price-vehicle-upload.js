const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testPriceVehicleUpload() {
    console.log('üîß [PRICE VEHICLE UPLOAD TEST] Configuration:', {
        url: supabaseUrl,
        hasKey: !!supabaseKey,
        isLocal: supabaseUrl.includes('127.0.0.1')
    });

    try {
        // 1. V√©rifier qu'il y a des v√©hicules √† poster
        console.log('\nüìã 1. V√©rification des v√©hicules √† poster...');
        
        const { data: vehiclesToPost, error: vehiclesError } = await supabase
            .from('cars_v2')
            .select(`
                id,
                reference,
                brand:brands(name),
                model:models(name),
                year,
                color,
                price,
                purchase_price,
                location,
                status,
                created_at,
                user_profiles!cars_v2_user_id_fkey(full_name)
            `)
            .not('id', 'in', `(
                select car_id 
                from advertisements 
                where car_id is not null
            )`)
            .limit(5);

        if (vehiclesError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des v√©hicules:', vehiclesError);
            return;
        }

        console.log(`‚úÖ ${vehiclesToPost.length} v√©hicules trouv√©s √† poster`);
        
        if (vehiclesToPost.length === 0) {
            console.log('‚ö†Ô∏è  Aucun v√©hicule √† poster trouv√©. Cr√©ons un v√©hicule de test...');
            
            // Cr√©er un v√©hicule de test
            const { data: testVehicle, error: createError } = await supabase
                .from('cars_v2')
                .insert([{
                    brand_id: 1, // Assurez-vous que cette marque existe
                    model_id: 1, // Assurez-vous que ce mod√®le existe
                    year: 2020,
                    color: 'Blanc',
                    price: 15000,
                    purchase_price: 12000,
                    location: 'Paris',
                    status: 'disponible',
                    user_id: '00000000-0000-0000-0000-000000000000', // Utilisateur de test
                    add_by_user: '00000000-0000-0000-0000-000000000000'
                }])
                .select('id, reference')
                .single();

            if (createError) {
                console.error('‚ùå Erreur lors de la cr√©ation du v√©hicule de test:', createError);
                return;
            }

            console.log('‚úÖ V√©hicule de test cr√©√©:', testVehicle);
        }

        // 2. V√©rifier la structure de la table advertisements
        console.log('\nüìã 2. V√©rification de la structure de la table advertisements...');
        
        const { data: advertisementColumns, error: columnsError } = await supabase
            .rpc('get_table_columns', { table_name: 'advertisements' });

        if (columnsError) {
            console.log('‚ö†Ô∏è  Impossible de r√©cup√©rer les colonnes, v√©rifions manuellement...');
            
            const { data: sampleAd, error: sampleError } = await supabase
                .from('advertisements')
                .select('*')
                .limit(1);

            if (sampleError) {
                console.error('‚ùå Erreur lors de la v√©rification de la table advertisements:', sampleError);
                return;
            }

            console.log('‚úÖ Structure de la table advertisements v√©rifi√©e');
            if (sampleAd.length > 0) {
                console.log('üìù Exemple d\'annonce:', Object.keys(sampleAd[0]));
            }
        } else {
            console.log('‚úÖ Colonnes de la table advertisements:', advertisementColumns);
        }

        // 3. Tester la cr√©ation d'une annonce avec photos
        console.log('\nüìã 3. Test de cr√©ation d\'annonce avec photos...');
        
        const testVehicle = vehiclesToPost[0] || { id: 'test-id', reference: 'TEST-001' };
        
        const testAdvertisement = {
            car_id: testVehicle.id,
            title: 'Test d\'annonce avec photos',
            description: 'Description de test pour v√©rifier l\'upload d\'images',
            price: testVehicle.price || 15000,
            photos: [
                'https://example.com/photo1.jpg',
                'https://example.com/photo2.jpg'
            ],
            status: 'actif',
            posted_by_user: '00000000-0000-0000-0000-000000000000' // Utilisateur de test
        };

        const { data: createdAd, error: createAdError } = await supabase
            .from('advertisements')
            .insert([testAdvertisement])
            .select('*')
            .single();

        if (createAdError) {
            console.error('‚ùå Erreur lors de la cr√©ation de l\'annonce de test:', createAdError);
            return;
        }

        console.log('‚úÖ Annonce de test cr√©√©e avec succ√®s:', {
            id: createdAd.id,
            car_id: createdAd.car_id,
            title: createdAd.title,
            photos_count: createdAd.photos?.length || 0
        });

        // 4. V√©rifier que l'API d'upload est accessible
        console.log('\nüìã 4. V√©rification de l\'API d\'upload...');
        
        try {
            const response = await fetch(`${process.env.NEXT_PUBLIC_SUPABASE_URL?.replace('/rest/v1', '') || 'http://127.0.0.1:54321'}/api/upload`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    test: true
                })
            });

            if (response.status === 404) {
                console.log('‚ö†Ô∏è  API d\'upload non trouv√©e (normal en mode test)');
            } else {
                console.log('‚úÖ API d\'upload accessible');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è  Impossible de tester l\'API d\'upload (normal en mode test):', error.message);
        }

        // 5. Nettoyer les donn√©es de test
        console.log('\nüìã 5. Nettoyage des donn√©es de test...');
        
        if (createdAd) {
            const { error: deleteError } = await supabase
                .from('advertisements')
                .delete()
                .eq('id', createdAd.id);

            if (deleteError) {
                console.error('‚ö†Ô∏è  Erreur lors du nettoyage de l\'annonce de test:', deleteError);
            } else {
                console.log('‚úÖ Annonce de test supprim√©e');
            }
        }

        console.log('\n‚úÖ Test termin√© avec succ√®s !');
        console.log('\nüìù R√©sum√©:');
        console.log('- ‚úÖ V√©hicules √† poster r√©cup√©r√©s');
        console.log('- ‚úÖ Structure de la table advertisements v√©rifi√©e');
        console.log('- ‚úÖ Cr√©ation d\'annonce avec photos test√©e');
        console.log('- ‚úÖ API d\'upload v√©rifi√©e');
        console.log('- ‚úÖ Nettoyage effectu√©');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    }
}

// Ex√©cuter le test
testPriceVehicleUpload(); 