const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testRolesManagement() {
  console.log('üß™ Test de la gestion des r√¥les et p√¥les\n');

  try {
    // 1. Test de r√©cup√©ration des r√¥les existants
    console.log('1. R√©cup√©ration des r√¥les existants...');
    const { data: existingRoles, error: rolesError } = await supabase
      .from('roles')
      .select('*')
      .order('niveau', { ascending: true });

    if (rolesError) throw rolesError;
    console.log(`‚úÖ ${existingRoles.length} r√¥les trouv√©s`);
    existingRoles.forEach(role => {
      console.log(`   - ${role.nom} (Niveau ${role.niveau})`);
    });

    // 2. Test de r√©cup√©ration des p√¥les existants
    console.log('\n2. R√©cup√©ration des p√¥les existants...');
    const { data: existingPoles, error: polesError } = await supabase
      .from('poles')
      .select('*')
      .order('name', { ascending: true });

    if (polesError) throw polesError;
    console.log(`‚úÖ ${existingPoles.length} p√¥les trouv√©s`);
    existingPoles.forEach(pole => {
      console.log(`   - ${pole.name}`);
    });

    // 3. Test de cr√©ation d'un nouveau r√¥le
    console.log('\n3. Test de cr√©ation d\'un nouveau r√¥le...');
    const timestamp = Date.now();
    const newRole = {
      nom: `Test Role Management ${timestamp}`,
      niveau: 4,
      description: 'R√¥le de test pour la gestion des r√¥les'
    };

    let createdRole;
    const { data: roleData, error: createRoleError } = await supabase
      .from('roles')
      .insert(newRole)
      .select()
      .single();

    if (createRoleError) {
      if (createRoleError.code === '23505') {
        console.log(`‚ö†Ô∏è  Erreur de cl√© dupliqu√©e, tentative avec un ID diff√©rent...`);
        // Essayer avec un ID sp√©cifique plus √©lev√©
        const { data: retryRole, error: retryError } = await supabase
          .from('roles')
          .insert({ ...newRole, id: 9999 })
          .select()
          .single();
        
        if (retryError) throw retryError;
        console.log(`‚úÖ R√¥le cr√©√©: ${retryRole.nom} (ID: ${retryRole.id})`);
        createdRole = retryRole;
      } else {
        throw createRoleError;
      }
    } else {
      console.log(`‚úÖ R√¥le cr√©√©: ${roleData.nom} (ID: ${roleData.id})`);
      createdRole = roleData;
    }

    // 4. Test de cr√©ation d'un nouveau p√¥le
    console.log('\n4. Test de cr√©ation d\'un nouveau p√¥le...');
    const newPole = {
      name: `Test Pole Management ${timestamp}`,
      description: 'P√¥le de test pour la gestion des p√¥les'
    };

    const { data: createdPole, error: createPoleError } = await supabase
      .from('poles')
      .insert(newPole)
      .select()
      .single();

    if (createPoleError) throw createPoleError;
    console.log(`‚úÖ P√¥le cr√©√©: ${createdPole.name} (ID: ${createdPole.id})`);

    // 5. Test de mise √† jour du r√¥le
    console.log('\n5. Test de mise √† jour du r√¥le...');
    const updatedRole = {
      nom: `Test Role Management Updated ${timestamp}`,
      description: 'R√¥le de test mis √† jour'
    };

    const { data: updatedRoleData, error: updateRoleError } = await supabase
      .from('roles')
      .update(updatedRole)
      .eq('id', createdRole.id)
      .select()
      .single();

    if (updateRoleError) throw updateRoleError;
    console.log(`‚úÖ R√¥le mis √† jour: ${updatedRoleData.nom}`);

    // 6. Test de mise √† jour du p√¥le
    console.log('\n6. Test de mise √† jour du p√¥le...');
    const updatedPole = {
      name: `Test Pole Management Updated ${timestamp}`,
      description: 'P√¥le de test mis √† jour'
    };

    const { data: updatedPoleData, error: updatePoleError } = await supabase
      .from('poles')
      .update(updatedPole)
      .eq('id', createdPole.id)
      .select()
      .single();

    if (updatePoleError) throw updatePoleError;
    console.log(`‚úÖ P√¥le mis √† jour: ${updatedPoleData.name}`);

    // 7. Test des statistiques des r√¥les
    console.log('\n7. Test des statistiques des r√¥les...');
    const { count: totalRoles } = await supabase
      .from('roles')
      .select('*', { count: 'exact', head: true });

    const { data: userRoleCounts, error: userCountsError } = await supabase
      .from('user_roles')
      .select(`
        role_id,
        roles (
          nom
        )
      `);

    if (userCountsError) throw userCountsError;

    const roleCounts = userRoleCounts?.reduce((acc, item) => {
      const roleId = item.role_id;
      if (!acc[roleId]) {
        acc[roleId] = {
          role_id: roleId,
          role_nom: item.roles?.nom || 'Inconnu',
          user_count: 0
        };
      }
      acc[roleId].user_count++;
      return acc;
    }, {});

    console.log(`‚úÖ Statistiques des r√¥les:`);
    console.log(`   - Total r√¥les: ${totalRoles}`);
    console.log(`   - Utilisateurs avec r√¥les: ${userRoleCounts?.length || 0}`);
    
    if (roleCounts) {
      Object.values(roleCounts).forEach((item) => {
        console.log(`   - ${item.role_nom}: ${item.user_count} utilisateur(s)`);
      });
    }

    // 8. Test de suppression du r√¥le (seulement si aucun utilisateur ne l'utilise)
    console.log('\n8. Test de suppression du r√¥le...');
    const { data: usersWithRole, error: checkRoleError } = await supabase
      .from('user_roles')
      .select('id')
      .eq('role_id', createdRole.id);

    if (checkRoleError) throw checkRoleError;

    if (usersWithRole && usersWithRole.length > 0) {
      console.log(`‚ö†Ô∏è  Impossible de supprimer le r√¥le car ${usersWithRole.length} utilisateur(s) l'utilisent`);
    } else {
      const { error: deleteRoleError } = await supabase
        .from('roles')
        .delete()
        .eq('id', createdRole.id);

      if (deleteRoleError) throw deleteRoleError;
      console.log(`‚úÖ R√¥le supprim√© avec succ√®s`);
    }

    // 9. Test de suppression du p√¥le (seulement si aucun utilisateur ne l'utilise)
    console.log('\n9. Test de suppression du p√¥le...');
    const { data: usersWithPole, error: checkPoleError } = await supabase
      .from('user_poles')
      .select('id')
      .eq('pole_id', createdPole.id);

    if (checkPoleError) throw checkPoleError;

    if (usersWithPole && usersWithPole.length > 0) {
      console.log(`‚ö†Ô∏è  Impossible de supprimer le p√¥le car ${usersWithPole.length} utilisateur(s) y sont affect√©s`);
    } else {
      const { error: deletePoleError } = await supabase
        .from('poles')
        .delete()
        .eq('id', createdPole.id);

      if (deletePoleError) throw deletePoleError;
      console.log(`‚úÖ P√¥le supprim√© avec succ√®s`);
    }

    // 10. Test de v√©rification des noms uniques
    console.log('\n10. Test de v√©rification des noms uniques...');
    
    // Cr√©er un r√¥le temporaire pour tester
    const { data: tempRole, error: tempRoleError } = await supabase
      .from('roles')
      .insert({
        nom: `Test Unique Name ${timestamp}`,
        niveau: 5,
        description: 'Test de v√©rification des noms uniques'
      })
      .select()
      .single();

    if (tempRoleError) throw tempRoleError;

    // V√©rifier si le nom existe d√©j√†
    const { data: existingRoleWithName, error: checkNameError } = await supabase
      .from('roles')
      .select('id')
      .eq('nom', `Test Unique Name ${timestamp}`)
      .neq('id', tempRole.id);

    if (checkNameError) throw checkNameError;

    if (existingRoleWithName && existingRoleWithName.length > 0) {
      console.log(`‚ö†Ô∏è  Le nom 'Test Unique Name ${timestamp}' existe d√©j√†`);
    } else {
      console.log(`‚úÖ Le nom 'Test Unique Name ${timestamp}' est unique`);
    }

    // Nettoyer le r√¥le temporaire
    await supabase
      .from('roles')
      .delete()
      .eq('id', tempRole.id);

    console.log('\nüéâ Tous les tests de gestion des r√¥les et p√¥les sont pass√©s avec succ√®s !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error);
    process.exit(1);
  }
}

// Ex√©cuter les tests
testRolesManagement(); 