require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? 'OK' : 'MANQUANT');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? 'OK' : 'MANQUANT');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üîé TEST DES PERMISSIONS D\'ACC√àS AUX P√îLES');
console.log('==========================================\n');

async function testPoleAccess() {
  try {
    // 1. R√©cup√©rer l'utilisateur Ambrosie
    console.log('üìã 1. R√©cup√©ration de l\'utilisateur Ambrosie...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'a.cazimira@gmail.com');

    if (usersError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', usersError);
      return;
    }

    if (users.length === 0) {
      console.error('‚ùå Utilisateur Ambrosie non trouv√©');
      return;
    }

    const user = users[0];
    console.log('‚úÖ Utilisateur trouv√©:', user.prenom, user.nom);

    // 2. Tester les permissions pour le p√¥le Stock
    console.log('\nüìã 2. Test des permissions pour le p√¥le Stock...');
    const { data: stockAccess, error: stockError } = await supabase
      .rpc('get_user_pole_access', {
        user_id: user.auth_user_id,
        pole_name: 'Stock'
      });

    if (stockError) {
      console.error('‚ùå Erreur lors du test des permissions Stock:', stockError);
    } else {
      console.log('‚úÖ Permissions Stock:', stockAccess);
      if (stockAccess.length > 0) {
        const access = stockAccess[0];
        console.log(`   - Niveau: ${access.role_level}`);
        console.log(`   - Lecture: ${access.can_read ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - √âcriture: ${access.can_write ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Gestion: ${access.can_manage ? '‚úÖ' : '‚ùå'}`);
      } else {
        console.log('   - Aucun acc√®s trouv√©');
      }
    }

    // 3. Tester les permissions pour le p√¥le Commercial
    console.log('\nüìã 3. Test des permissions pour le p√¥le Commercial...');
    const { data: commercialAccess, error: commercialError } = await supabase
      .rpc('get_user_pole_access', {
        user_id: user.auth_user_id,
        pole_name: 'Commercial'
      });

    if (commercialError) {
      console.error('‚ùå Erreur lors du test des permissions Commercial:', commercialError);
    } else {
      console.log('‚úÖ Permissions Commercial:', commercialAccess);
      if (commercialAccess.length > 0) {
        const access = commercialAccess[0];
        console.log(`   - Niveau: ${access.role_level}`);
        console.log(`   - Lecture: ${access.can_read ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - √âcriture: ${access.can_write ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Gestion: ${access.can_manage ? '‚úÖ' : '‚ùå'}`);
      } else {
        console.log('   - Aucun acc√®s trouv√©');
      }
    }

    // 4. V√©rifier les affectations existantes
    console.log('\nüìã 4. V√©rification des affectations existantes...');
    const { data: userPoles, error: userPolesError } = await supabase
      .from('user_poles')
      .select(`
        *,
        poles (
          name,
          description
        )
      `)
      .eq('user_id', user.auth_user_id);

    if (userPolesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des affectations:', userPolesError);
    } else {
      console.log('‚úÖ Affectations trouv√©es:', userPoles.length);
      userPoles.forEach(assignment => {
        console.log(`   - ${assignment.poles.name} (niveau ${assignment.role_level})`);
      });
    }

    console.log('\nüéØ R√âSUM√â');
    console.log('==========');
    console.log('L\'utilisateur Ambrosie a √©t√© affect√© aux p√¥les Stock et Commercial avec le niveau 5 (lecture uniquement).');
    console.log('Dans les pages Stock et Contacts, seules les actions de lecture seront disponibles.');
    console.log('Les boutons de modification (ajouter, modifier, supprimer) seront masqu√©s.');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

testPoleAccess(); 