require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? 'OK' : 'MANQUANT');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? 'OK' : 'MANQUANT');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üîé SUPPRESSION DE L\'ACC√àS AU P√îLE PRICING');
console.log('==========================================\n');

async function removePricingAccess() {
  try {
    // 1. R√©cup√©rer l'utilisateur Ambrosie
    console.log('üìã 1. R√©cup√©ration de l\'utilisateur Ambrosie...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'a.cazimira@gmail.com');

    if (usersError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', usersError);
      return;
    }

    if (users.length === 0) {
      console.error('‚ùå Utilisateur Ambrosie non trouv√©');
      return;
    }

    const user = users[0];
    console.log('‚úÖ Utilisateur trouv√©:', user.prenom, user.nom);

    // 2. R√©cup√©rer le p√¥le Pricing
    console.log('\nüìã 2. R√©cup√©ration du p√¥le Pricing...');
    const { data: poles, error: polesError } = await supabase
      .from('poles')
      .select('*')
      .eq('name', 'Pricing');

    if (polesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du p√¥le Pricing:', polesError);
      return;
    }

    if (poles.length === 0) {
      console.error('‚ùå P√¥le Pricing non trouv√©');
      return;
    }

    const pricingPole = poles[0];
    console.log('‚úÖ P√¥le Pricing trouv√©:', pricingPole.name);

    // 3. Supprimer l'affectation au p√¥le Pricing
    console.log('\nüìã 3. Suppression de l\'affectation au p√¥le Pricing...');
    const { data: deletedAssignment, error: deleteError } = await supabase
      .from('user_poles')
      .delete()
      .eq('user_id', user.auth_user_id)
      .eq('pole_id', pricingPole.id)
      .select()
      .single();

    if (deleteError) {
      if (deleteError.code === 'PGRST116') {
        console.log('‚ö†Ô∏è  Aucune affectation au p√¥le Pricing trouv√©e');
      } else {
        console.error('‚ùå Erreur lors de la suppression:', deleteError);
        return;
      }
    } else {
      console.log('‚úÖ Affectation au p√¥le Pricing supprim√©e avec succ√®s');
      console.log('Affectation supprim√©e:', deletedAssignment);
    }

    // 4. V√©rifier les affectations restantes
    console.log('\nüìã 4. V√©rification des affectations restantes...');
    const { data: remainingAssignments, error: remainingError } = await supabase
      .from('user_poles')
      .select(`
        *,
        poles (
          name,
          description
        )
      `)
      .eq('user_id', user.auth_user_id);

    if (remainingError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des affectations restantes:', remainingError);
    } else {
      console.log('‚úÖ Affectations restantes:', remainingAssignments.length);
      if (remainingAssignments.length === 0) {
        console.log('   - Aucune affectation restante');
      } else {
        remainingAssignments.forEach(assignment => {
          console.log(`   - ${assignment.poles.name} (niveau ${assignment.role_level})`);
        });
      }
    }

    console.log('\nüéØ R√âSUM√â');
    console.log('==========');
    console.log('L\'affectation au p√¥le Pricing a √©t√© supprim√©e.');
    console.log('Vous ne devriez plus pouvoir acc√©der √† la page Pricing Angola.');
    console.log('Seules les pages Stock et Contacts devraient √™tre accessibles (niveau 5).');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

removePricingAccess(); 